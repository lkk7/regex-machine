name: Continuous Integration

on:
  push:
    branches:
      - master

  pull_request:
    branches:
      - master

jobs:
  lint:
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with: { python-version: "3.8" }

      - name: Install codespell
        run: pip3 install codespell

      - name: Lint
        run: cmake -D FORMAT_COMMAND=clang-format-14 -P cmake/lint.cmake

      - name: Spell check
        if: always()
        run: cmake -P cmake/spell.cmake

  coverage:
    needs: [lint]

    runs-on: ubuntu-22.04

    if: github.repository_owner == 'lkk7'
      && false

    steps:
      - uses: actions/checkout@v3

      - name: Install LCov
        run: sudo apt-get update -q
          && sudo apt-get install lcov -q -y

      - name: Configure
        run: cmake --preset=ci-coverage

      - name: Build
        run: cmake --build build/coverage -j 2

      - name: Test
        working-directory: build/coverage
        run: ctest --output-on-failure --no-tests=error -j 2

      - name: Process coverage info
        run: cmake --build build/coverage -t coverage

      - name: Submit to codecov.io
        uses: codecov/codecov-action@v3
        with:
          file: build/coverage/coverage.info

  sanitize:
    needs: [lint]

    runs-on: ubuntu-22.04

    env: { CXX: clang++-14 }

    steps:
      - uses: actions/checkout@v3

      - name: Install catch2
        run: |
          git clone https://github.com/catchorg/Catch2.git
          cd Catch2
          cmake -Bbuild -H. -DBUILD_TESTING=OFF
          sudo cmake --build build/ --target install

      - name: Configure
        run: cmake --preset=ci-sanitize

      - name: Build
        run: cmake --build build/sanitize -j 2

      - name: Test
        working-directory: build/sanitize
        env:
          ASAN_OPTIONS: "strict_string_checks=1:\
            detect_stack_use_after_return=1:\
            check_initialization_order=1:\
            strict_init_order=1:\
            detect_leaks=1"
          UBSAN_OPTIONS: print_stacktrace=1
        run: ctest --output-on-failure --no-tests=error -j 2

  test:
    needs: [lint]

    strategy:
      matrix:
        os: ["macos-13", ubuntu-22.04]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3

      - name: Install static analyzers
        if: matrix.os == 'ubuntu-22.04'
        run: >-
          sudo apt-get install clang-tidy-14 cppcheck -y -q

          sudo update-alternatives --install
          /usr/bin/clang-tidy clang-tidy
          /usr/bin/clang-tidy-14 140

      - name: Install Catch2
        run: |
          git clone https://github.com/catchorg/Catch2.git
          cd Catch2
          cmake -Bbuild -H. -DBUILD_TESTING=OFF
          sudo cmake --build build/ --target install
        shell: bash

      - name: Configure
        run: |
          matrix_os="${{ matrix.os }}"
          os_part="${matrix_os%%-*}"
          preset="ci-$os_part"
          cmake "--preset=$preset"
        shell: bash

      - name: Build
        run: cmake --build build --config Release -j 2

      - name: Install
        run: cmake --install build --config Release --prefix prefix

      - name: Test
        working-directory: build
        run: ctest --output-on-failure --no-tests=error -C Release -j 2
